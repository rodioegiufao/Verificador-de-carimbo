import PyPDF2
import os
import re
import streamlit as st
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill
from openpyxl.styles.colors import Color
from io import BytesIO
import pandas as pd

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(page_title="Analisador de Carimbos PDF", page_icon="üìÑ", layout="wide")

# T√≠tulo da aplica√ß√£o
st.title("üìÑ Analisador de Carimbos em PDFs")
st.markdown("Esta ferramenta verifica a presen√ßa de palavras-chave em arquivos PDF e gera um relat√≥rio.")

# Dados FIXOS dos engenheiros e CREAs (sempre ser√£o pesquisados)
ENGENHEIROS_CREAS_FIXOS = {
    "RODRIGO DAMASCENO NASCIMENTO": ["0920192912", "092019291-2"],
    "J√ÇNIO RIBEIRO LOPES": ["0912111810", "091211181-0"],
    "FLAVIO SORDI": ["2201136580"],
    "RITHELLY LOBATO": ["A278773-3", "A2787733"],
    "SALOM√ÉO": ["0401863549", "040186354-9"]
}

# Mapeamento de c√≥digos de projeto para descri√ß√µes
MAPEAMENTO_PROJETOS = {
    "ECX": "PROJETO EL√âTRICO DE BAIXA",
    "ILUX": "PROJETO DE ILUMINA√á√ÉO EXTERNA",
    "CFTV": "PROJETO DE CFTV",
    "CAB": "PROJETO DE CABEAMENTO",
    "SOM": "PROJETO DE SONORIZA√á√ÉO",
    "SUB": "PROJETO DE SUBESTA√á√ÉO",
    "SPDA": "PROJETO DE SPDA",
    "TEF": "PROJETO DE TELEFONIA",
    "ALI": "PROJETO EL√âTRICO DE BAIXA",
    "TUG": "PROJETO EL√âTRICO DE BAIXA",
    "ILU": "PROJETO EL√âTRICO DE BAIXA",
    "EME": "PROJETO EL√âTRICO DE BAIXA",
    "FOT": "PROJETO EL√âTRICO FOTOVOLTAICO",
    "LEV": "LEVANTAMENTO TOPOGR√ÅFICO",
    "EST": "ESTRUTURA DE CONCRETO ARMADO",
    "FUN": "ESTRUTURA DE CONCRETO ARMADO", 
    "EMT": "ESTRUTURA MET√ÅLICA",
    "DRE": "PROJETO DE DRENAGEM",
    "PAV": "PROJETO DE PAVIMENTA√á√ÉO",
    "REG": "PROJETO DE REDE DE ESGOTO",
    "TER": "PROJETO DE TERRAPLENAGEM",
    "CANT": "PROJETO DE CANTEIRO DE OBRAS",
    "HID": "PROJETO DE INSTALA√á√ïES HIDR√ÅULICAS",
    "IRRI": "PROJETO DE IRRIGA√á√ÉO",
    "SAN": "PROJETO DE INSTALA√á√ïES SANIT√ÅRIAS",
    "PLU": "PROJETO DE SISTEMA DE REDES DE √ÅGUAS",
    "INC": "PROJETO DE PREVEN√á√ÉO E COMBATE A INC√äNDIO",
    "GLP": "PROJETO DE INSTALA√á√ïES DE GASES GLP",
    "CLI": "PROJETO DE INSTALA√á√ïES DE GASES GLP",
    "EXA": "PROJETO DE EXAUST√ÉO"
}

# Criar lista FIXA de palavras-chave dos engenheiros (sempre ser√£o pesquisadas)
PALAVRAS_CHAVE_ENGENHEIROS = []
for engenheiro, creas in ENGENHEIROS_CREAS_FIXOS.items():
    PALAVRAS_CHAVE_ENGENHEIROS.append(engenheiro)
    PALAVRAS_CHAVE_ENGENHEIROS.extend(creas)

# Palavras-chave padr√£o adicionais (projeto espec√≠fico)
PALAVRAS_CHAVE_PADRAO = [
    "IPER",
    "CONSTRU√á√ÉO DA SEDE DO INSTITUTO DE PREVID√äNCIA DO ESTADO",
    "DE RORAIMA - IPER",
    "AGOSTO",
    "2025",
    "RUA",
    "CC-22",
    "LOTE: 712 - REM.", 
    "LAURA MOREIRA",
    "69318-105",
    "BOA VISTA",
    "RR",
    "2.220,32",
    "2.654,11",
    "SAUDE",
    "SA√öDE"
]

# Criar abas para diferentes funcionalidades
tab1, tab2 = st.tabs(["Analisador de PDF", "Tutorial em V√≠deo"])

with tab1:
    # Sidebar para configura√ß√µes
    with st.sidebar:
        st.header("Configura√ß√µes")
        
        # Upload de arquivos PDF
        uploaded_files = st.file_uploader("Selecione os arquivos PDF", type="pdf", accept_multiple_files=True)
        
        # Entrada de palavras-chave
        st.subheader("Palavras-chave")
        
        # Informar que engenheiros ser√£o sempre pesquisados
        st.info("üîç Engenheiros e CREAs ser√£o SEMPRE pesquisados:")
        with st.expander("Ver engenheiros e CREAs fixos"):
            for engenheiro, creas in ENGENHEIROS_CREAS_FIXOS.items():
                st.write(f"**{engenheiro}**: {', '.join(creas)}")
        
        # Mostrar mapeamento de projetos
        st.info("üóÇÔ∏è Mapeamento de c√≥digos de projeto:")
        with st.expander("Ver mapeamento de projetos"):
            for codigo, descricao in MAPEAMENTO_PROJETOS.items():
                st.write(f"**{codigo}**: {descricao}")
        
        # Campo para palavras-chave adicionais (projeto espec√≠fico)
        keywords_input = st.text_area(
            "Insira palavras-chave adicionais do projeto (uma por linha)", 
            value="\n".join(PALAVRAS_CHAVE_PADRAO),
            height=200,
            help="Estas palavras-chave ser√£o pesquisadas al√©m dos engenheiros e CREAs"
        )
        
        # Op√ß√µes adicionais
        st.subheader("Op√ß√µes")
        check_filename = st.checkbox("Verificar nome do arquivo no conte√∫do", value=True)
        check_sheet_number = st.checkbox("Verificar n√∫mero da prancha no conte√∫do", value=True)
        check_projeto = st.checkbox("Verificar descri√ß√£o do projeto no conte√∫do", value=True,
                                   help="Verifica se a descri√ß√£o do projeto est√° presente no PDF")
        
        # Bot√£o para iniciar an√°lise
        analyze_button = st.button("Iniciar An√°lise", type="primary")

    # Fun√ß√£o para extrair o n√∫mero da prancha do nome do arquivo
    def extrair_numero_prancha(nome_arquivo):
        # Remove a extens√£o e poss√≠veis sufixos como "_assinado"
        nome_sem_ext = os.path.splitext(nome_arquivo)[0].replace("_assinado", "")
        
        # Procura por padr√µes como _01_07 ou -01-07 no nome
        padroes = [
            r'[_\-](\d{2})[_\-](\d{2})(?:\..*)?$',
            r'[_\-](\d{2})[_\-](\d{3})(?:\..*)?$',
            r'[_\-](\d{3})[_\-](\d{3})(?:\..*)?$'
        ]
        
        for padrao in padroes:
            correspondencia = re.search(padrao, nome_sem_ext)
            if correspondencia:
                return f"{correspondencia.group(1)} {correspondencia.group(2)}"
        
        return None

    # Fun√ß√£o para verificar se o arquivo est√° assinado pelo nome
    def verificar_assinatura_nome(nome_arquivo):
        # Verifica se o nome do arquivo cont√©m "assinado" (case insensitive)
        return "assinado" in nome_arquivo.lower()

    # Fun√ß√£o para extrair o c√≥digo do projeto do nome do arquivo - CORRIGIDA
    def extrair_codigo_projeto(nome_arquivo):
        # Padr√£o mais flex√≠vel: PRJ-XXX- (onde XXX √© o c√≥digo do projeto)
        padrao = r'PRJ-([A-Z]+)-'
        correspondencia = re.search(padrao, nome_arquivo)
        if correspondencia:
            return correspondencia.group(1)
        return None

    # Processamento quando o bot√£o √© clicado
    if analyze_button and uploaded_files:
        # Preparar palavras-chave (engenheiros FIXOS + palavras adicionais do usu√°rio)
        palavras_chave_adicionais = [linha.strip() for linha in keywords_input.split('\n') if linha.strip()]
        
        # Combinar palavras-chave fixas dos engenheiros com as adicionais
        todas_palavras_chave = PALAVRAS_CHAVE_ENGENHEIROS + palavras_chave_adicionais
        
        # Dicion√°rio para armazenar os dados de cada PDF
        resultados = {}
        
        # Barra de progresso
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Processar cada arquivo PDF
        for i, uploaded_file in enumerate(uploaded_files):
            # Atualizar barra de progresso
            progress = (i + 1) / len(uploaded_files)
            progress_bar.progress(progress)
            status_text.text(f"Processando {i+1} de {len(uploaded_files)}: {uploaded_file.name}")
            
            # Extrair o nome do arquivo sem a extens√£o
            nome_arquivo = os.path.splitext(uploaded_file.name)[0]
            
            # Verificar se o arquivo est√° assinado pelo nome
            assinado_pelo_nome = verificar_assinatura_nome(uploaded_file.name)
            
            # Extrair o n√∫mero da prancha (removendo "_assinado" se existir)
            nome_sem_assinado = nome_arquivo.replace("_assinado", "")
            numero_prancha = extrair_numero_prancha(nome_sem_assinado)
            
            # Extrair o c√≥digo do projeto
            codigo_projeto = extrair_codigo_projeto(uploaded_file.name)
            descricao_projeto = MAPEAMENTO_PROJETOS.get(codigo_projeto, "Desconhecido") if codigo_projeto else "N√£o identificado"
            
            # Lista para armazenar os dados encontrados no PDF atual
            dados_carimbo = []
            nome_arquivo_encontrado = False
            prancha_encontrada = False
            projeto_encontrado = False
            
            # Ler o conte√∫do del PDF
            try:
                leitor = PyPDF2.PdfReader(uploaded_file)
                
                for pagina in leitor.pages:
                    texto_extraido = pagina.extract_text()
                    
                    if texto_extraido:
                        texto_extraido = texto_extraido.replace("\n", " ")  # Remover quebras de linha
                        
                        # Verificar se o nome do arquivo est√° no texto da p√°gina
                        if check_filename and nome_sem_assinado in texto_extraido:
                            nome_arquivo_encontrado = True
                        
                        # Verificar se o n√∫mero da prancha est√° no texto
                        if check_sheet_number and numero_prancha:
                            if (numero_prancha.replace(" ", "_") in texto_extraido or 
                                numero_prancha.replace(" ", "-") in texto_extraido or 
                                numero_prancha in texto_extraido):
                                prancha_encontrada = True
                        
                        # Verificar se a descri√ß√£o do projeto est√° no texto
                        if check_projeto and codigo_projeto and descricao_projeto != "Desconhecido":
                            if descricao_projeto in texto_extraido:
                                projeto_encontrado = True
                        
                        # Verificar palavras-chave FIXAS dos engenheiros
                        for palavra in PALAVRAS_CHAVE_ENGENHEIROS:
                            if palavra in texto_extraido and palavra not in dados_carimbo:
                                dados_carimbo.append(palavra)
                        
                        # Verificar palavras-chave adicionais do projeto
                        for palavra in palavras_chave_adicionais:
                            if palavra in texto_extraido and palavra not in dados_carimbo:
                                dados_carimbo.append(palavra)
            
            except Exception as e:
                st.error(f"Erro ao processar {uploaded_file.name}: {str(e)}")
                continue
            
            # Armazenar os dados no dicion√°rio
            resultados[uploaded_file.name] = {
                'dados_carimbo': dados_carimbo,
                'nome_arquivo_encontrado': nome_arquivo_encontrado,
                'prancha_encontrada': prancha_encontrada,
                'assinado_pelo_nome': assinado_pelo_nome,
                'projeto_encontrado': projeto_encontrado,
                'codigo_projeto': codigo_projeto,
                'descricao_projeto': descricao_projeto,
                'numero_prancha': numero_prancha,
                'nome_arquivo': nome_arquivo
            }
        
        # Limpar barra de progresso
        progress_bar.empty()
        status_text.empty()
        
        # Criar DataFrame com os resultados
        dados_tabela = []
        for nome_arquivo, dados in resultados.items():
            dados_tabela.append({
                "Prancha": dados['numero_prancha'] if dados['numero_prancha'] else "N√£o identificado",
                "C√≥digo Projeto": dados['codigo_projeto'] if dados['codigo_projeto'] else "N√£o identificado",
                "Descri√ß√£o Projeto": dados['descricao_projeto'],
                "Palavras-chave encontradas": ", ".join(dados['dados_carimbo']) if dados['dados_carimbo'] else "Nenhuma",
                "Nome do Arquivo": nome_arquivo,
                "N√∫mero da Prancha": dados['numero_prancha'] if dados['numero_prancha'] else "N√£o identificado",
                "Nome encontrado": "Sim" if dados['nome_arquivo_encontrado'] else "N√£o",
                "Prancha encontrada": "Sim" if dados['prancha_encontrada'] else "N√£o",
                "Arquivo assinado": "Sim" if dados['assinado_pelo_nome'] else "N√£o",
                "Projeto encontrado": "Sim" if dados['projeto_encontrado'] else "N√£o"
            })
        
        df = pd.DataFrame(dados_tabela)
        
        # Exibir resultados
        st.subheader("Resultados da An√°lise")
        st.dataframe(df)
        
        # Estat√≠sticas
        st.subheader("Estat√≠sticas")
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            st.metric("Total de Arquivos", len(uploaded_files))
        with col2:
            st.metric("Arquivos com Nome Encontrado", 
                     sum(1 for dados in resultados.values() if dados['nome_arquivo_encontrado']))
        with col3:
            st.metric("Arquivos com Prancha Encontrada", 
                     sum(1 for dados in resultados.values() if dados['prancha_encontrada']))
        with col4:
            st.metric("Arquivos Assinados", 
                     sum(1 for dados in resultados.values() if dados['assinado_pelo_nome']))
        with col5:
            st.metric("Projetos Encontrados", 
                     sum(1 for dados in resultados.values() if dados['projeto_encontrado']))
        
        # Detalhamento dos engenheiros encontrados
        st.subheader("Engenheiros Encontrados")
        engenheiros_encontrados = {}
        for dados in resultados.values():
            for palavra in dados['dados_carimbo']:
                for engenheiro in ENGENHEIROS_CREAS_FIXOS:
                    if palavra in [engenheiro] + ENGENHEIROS_CREAS_FIXOS[engenheiro]:
                        engenheiros_encontrados[engenheiro] = engenheiros_encontrados.get(engenheiro, 0) + 1
        
        if engenheiros_encontrados:
            for engenheiro, count in engenheiros_encontrados.items():
                st.write(f"‚Ä¢ **{engenheiro}**: encontrado em {count} arquivo(s)")
        else:
            st.write("Nenhum engenheiro encontrado nos arquivos analisados")
        
        # Detalhamento dos projetos
        st.subheader("Detalhamento dos Projetos")
        projetos_encontrados = {}
        for dados in resultados.values():
            codigo = dados['codigo_projeto'] or "Desconhecido"
            descricao = dados['descricao_projeto']
            if codigo != "Desconhecido":
                chave = f"{codigo} - {descricao}"
                projetos_encontrados[chave] = projetos_encontrados.get(chave, 0) + 1
        
        if projetos_encontrados:
            for projeto, count in projetos_encontrados.items():
                st.write(f"‚Ä¢ **{projeto}**: {count} arquivo(s)")
        else:
            st.write("Nenhum projeto identificado nos arquivos analisados")
        
        # Criar planilha Excel para download
        wb = Workbook()
        ws = wb.active
        ws.title = "Resultados PDF"
        
        # Cabe√ßalhos (sem a coluna "Prancha" que √© redundante)
        cabecalhos = ["C√≥digo Projeto", "Descri√ß√£o Projeto", "Palavras-chave encontradas", 
                      "Nome do Arquivo", "N√∫mero da Prancha", "Nome encontrado", 
                      "Prancha encontrada", "Arquivo assinado", "Projeto encontrado"]
        
        # Escrever cabe√ßalhos em negrito
        for col, cabecalho in enumerate(cabecalhos, start=1):
            celula = ws.cell(row=1, column=col, value=cabecalho)
            celula.font = Font(bold=True)
        
        # Preencher os dados (pulando a coluna "Prancha" que √© redundante)
        for row, dados in enumerate(dados_tabela, start=2):
            # Ignorar a primeira coluna ("Prancha") e escrever a partir da segunda
            ws.cell(row=row, column=1, value=dados["C√≥digo Projeto"])
            ws.cell(row=row, column=2, value=dados["Descri√ß√£o Projeto"])
            ws.cell(row=row, column=3, value=dados["Palavras-chave encontradas"])
            ws.cell(row=row, column=4, value=dados["Nome do Arquivo"])
            ws.cell(row=row, column=5, value=dados["N√∫mero da Prancha"])
            ws.cell(row=row, column=6, value=dados["Nome encontrado"])
            ws.cell(row=row, column=7, value=dados["Prancha encontrada"])
            ws.cell(row=row, column=8, value=dados["Arquivo assinado"])
            ws.cell(row=row, column=9, value=dados["Projeto encontrado"])
        
        # Aplicar formata√ß√£o condicional para as colunas de Sim/N√£o
        verde_claro = PatternFill(start_color="00FF00", end_color="00FF00", fill_type="solid")
        vermelho_claro = PatternFill(start_color="FF2C2B", end_color="FF2C2B", fill_type="solid")
        
        # Colunas para formatar (6: Nome encontrado, 7: Prancha encontrada, 8: Arquivo assinado, 9: Projeto encontrado)
        colunas_para_formatar = [6, 7, 8, 9]
        
        for coluna in colunas_para_formatar:
            for row in range(2, len(dados_tabela) + 2):
                celula = ws.cell(row=row, column=coluna)
                if celula.value == "Sim":
                    celula.fill = verde_claro
                elif celula.value == "N√£o":
                    celula.fill = vermelho_claro
        
        # Ajustar largura das colunas
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2) * 1.2
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # Salvar para um buffer em mem√≥ria
        excel_buffer = BytesIO()
        wb.save(excel_buffer)
        excel_buffer.seek(0)
        
        # Bot√£o para download
        st.download_button(
            label="üì• Baixar Resultados em Excel",
            data=excel_buffer,
            file_name="resultados_analise.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        
        st.success("An√°lise conclu√≠da com sucesso! ‚úÖ")

    elif analyze_button and not uploaded_files:
        st.error("Por favor, selecione pelo menos um arquivo PDF.")

    # Instru√ß√µes iniciais
    else:
        st.info("üëà Use a barra lateral para configurar e iniciar a an√°lise.")
        st.markdown("""
        ### Como usar:
        1. Selecione os arquivos PDF que deseja analisar
        2. Insira palavras-chave adicionais do projeto (opcional)
        3. Ajuste as op√ß√µes conforme necess√°rio
        4. Clique em 'Iniciar An√°lise'
        
        ### ‚ö†Ô∏è Importante:
        - **Engenheiros e CREAs ser√£o SEMPRE pesquisados** automaticamente
        - As palavras-chave adicionais s√£o para complementar a busca
        - Os engenheiros pr√©-configurados n√£o podem ser desativados
        - A verifica√ß√£o de assinatura √© feita pelo nome do arquivo (presen√ßa de "assinado")
        - O c√≥digo do projeto √© extra√≠do automaticamente del nome do arquivo
        - A descri√ß√£o do projeto √© mapeada automaticamente e verificada no conte√∫do
        """)

with tab2:
    st.header("üìπ Tutorial em V√≠deo")
    st.markdown("""
    Assista ao v√≠deo abaixo para aprender como usar o analisador de PDF:
    """)
    
    # Inserir o v√≠deo do YouTube
    video_url = "https://youtu.be/GB6hvQPODCw"
    st.video(video_url)
    
    st.markdown("""
    ### Pontos abordados no tutorial:
    - Como preparar seus arquivos PDF para an√°lise
    - Como usar palavras-chave adicionais do projeto
    - Interpreta√ß√£o dos resultados
    - Como usar o relat√≥rio em Excel gerado
    - Entendendo a busca autom√°tica por engenheiros e CREAs
    - Entendendo o mapeamento autom√°tico de c√≥digos de projeto
    
    ### Engenheiros e CREAs configurados (busca autom√°tica):
    """)
    
    # Tabela com engenheiros e CREAs
    dados_engenheiros = []
    for engenheiro, creas in ENGENHEIROS_CREAS_FIXOS.items():
        dados_engenheiros.append({
            "Engenheiro": engenheiro,
            "CREA(s)": ", ".join(creas)
        })
    
    st.table(pd.DataFrame(dados_engenheiros))
    
    st.markdown("""
    ### Mapeamento de c√≥digos de projeto:
    """)
    
    # Tabela com mapeamento de projetos
    dados_projetos = []
    for codigo, descricao in MAPEAMENTO_PROJETOS.items():
        dados_projetos.append({
            "C√≥digo": codigo,
            "Descri√ß√£o": descricao
        })
    
    st.table(pd.DataFrame(dados_projetos))
    
    st.markdown("""
    ### ‚ö†Ô∏è Importante:
    Estes engenheiros e CREAs s√£o **sempre pesquisados** automaticamente, 
    independentemente das palavras-chave adicionais inseridas.
    
    ### Sobre a verifica√ß√£o de assinatura:
    A verifica√ß√£o de assinatura √© feita pelo nome do arquivo. 
    Arquivos que cont√™m "assinado" no nome (como "PRJ-FOT-IPER-04-05_assinado.pdf") 
    ser√£o marcados como assinados na coluna "Arquivo assinado".
    
    ### Sobre o mapeamento de projetos:
    O c√≥digo do projeto √© extra√≠do automaticamente del nome do arquivo (ex: "ECX" de "PRJ-ECX-IPER-02-07")
    e mapeado para a descri√ß√£o correspondente. Em seguida, verifica-se se essa descri√ß√£o est√° presente no conte√∫do do PDF.
    """)

# Adicionar um rodap√©
st.markdown("---")
st.markdown(
    """
    <style>
    .footer {
        text-align: center;
        color: gray;
        padding: 10px;
    }
    </style>
    <div class="footer">
    <p>Desenvolvido por Rodrigo Damasceno | ¬© 2025 - Todos os direitos reservados</p>
    </div>
    """,
    unsafe_allow_html=True
)


